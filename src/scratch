temp[0] = A[0]; temp[1] = B[0]; temp[2] = C[0]; temp[3] = D[0];
calcPlane(1,2,3,0);
  if (temp[0] == A[0] && temp[1] == B[0] && temp[2] == C[0] && temp[3] == D[0]) cout << "PLANE CHECK GOOD.";
  else cout << "PLANE CHECK BAD.";
calcPlane(0,2,3,0);
if (temp[0] == A[0] && temp[1] == B[0] && temp[2] == C[0] && temp[3] == D[0]) cout << "PLANE CHECK GOOD.";
else cout << "PLANE CHECK BAD.";
calcPlane(0,1,3,0);
if (temp[0] == A[0] && temp[1] == B[0] && temp[2] == C[0] && temp[3] == D[0]) cout << "PLANE CHECK GOOD.";
else cout << "PLANE CHECK BAD.";


temp[0] = A[1]; temp[1] = B[1]; temp[2] = C[1]; temp[3] = D[1];
calcPlane(5,6,7,1);
  if (temp[0] == A[1] && temp[1] == B[1] && temp[2] == C[1] && temp[3] == D[1]) cout << "PLANE CHECK GOOD.";
  else cout << "PLANE CHECK BAD.";
calcPlane(4,6,7,1);
  if (temp[0] == A[1] && temp[1] == B[1] && temp[2] == C[1] && temp[3] == D[1]) cout << "PLANE CHECK GOOD.";
  else cout << "PLANE CHECK BAD.";
calcPlane(4,5,7,1);
  if (temp[0] == A[1] && temp[1] == B[1] && temp[2] == C[1] && temp[3] == D[1]) cout << "PLANE CHECK GOOD.";
  else cout << "PLANE CHECK BAD.";

  temp[0] = A[2]; temp[1] = B[2]; temp[2] = C[2]; temp[3] = D[2];
  calcPlane(0,1,5,2);
  if (temp[0] == A[2] && temp[1] == B[2] && temp[2] == C[2] && temp[3] == D[2]) cout << "PLANE CHECK GOOD";
  else cout << "PLANE CHECK BAD";
  calcPlane(1,4,5,2);
  if (temp[0] == A[2] && temp[1] == B[2] && temp[2] == C[2] && temp[3] == D[2]) cout << "PLANE CHECK GOOD";
  else cout << "PLANE CHECK BAD";
  calcPlane(0,4,5,2);
  if (temp[0] == A[2] && temp[1] == B[2] && temp[2] == C[2] && temp[3] == D[2]) cout << "PLANE CHECK GOOD";
  else cout << "PLANE CHECK BAD";

  temp[0] = A[3]; temp[1] = B[3]; temp[2] = C[3]; temp[3] = D[3];
  calcPlane(2,3,7,3);
  if (temp[0] == A[3] && temp[1] == B[3] && temp[2] == C[3] && temp[3] == D[3]) cout << "GOOD";
  else cout << "BAD";
  calcPlane(2,6,7,3);
  if (temp[0] == A[3] && temp[1] == B[3] && temp[2] == C[3] && temp[3] == D[3]) cout << "GOOD";
  else cout << "BAD";
  calcPlane(3,6,7,3);
  if (temp[0] == A[3] && temp[1] == B[3] && temp[2] == C[3] && temp[3] == D[3]) cout << "GOOD";
  else cout << "BAD";

  temp[0] = A[4]; temp[1] = B[4]; temp[2] = C[4]; temp[3] = D[4];
  calcPlane(0,2,6,4);
  if (temp[0] == A[4] && temp[1] == B[4] && temp[2] == C[4] && temp[3] == D[4]) cout << "GOOD";
  else cout << "BAD";
  calcPlane(2,4,6,4);
  if (temp[0] == A[4] && temp[1] == B[4] && temp[2] == C[4] && temp[3] == D[4]) cout << "GOOD";
  else cout << "BAD";
  calcPlane(0,4,6,4);
  if (temp[0] == A[4] && temp[1] == B[4] && temp[2] == C[4] && temp[3] == D[4]) cout << "GOOD";
  else cout << "BAD";

  temp[0] = A[5]; temp[1] = B[5]; temp[1] = C[5]; temp[1] = D[5];
  calcPlane(1,3,7,5);
  if (temp[0] == A[5] && temp[1] == B[5] && temp[2] == C[5] && temp[3] == D[5]) cout << "GOOD";
  else cout << "BAD";
  calcPlane(3,5,7,5);
  if (temp[0] == A[5] && temp[1] == B[5] && temp[2] == C[5] && temp[3] == D[5]) cout << "GOOD";
  else cout << "BAD";
  calcPlane(1,5,7,5);
  if (temp[0] == A[5] && temp[1] == B[5] && temp[2] == C[5] && temp[3] == D[5]) cout << "GOOD";
  else cout << "BAD";


Fast-forward
 src/averages.cpp         |   4 ++++
 src/classes.cpp          |   4 ++--
 src/main.cpp             |   4 +++-
 src/system_functions.cpp |   5 ++++-
 t                        | Bin 648260 -> 494472 bytes
 uvt_test/mcmd.inp        |   4 ++--
 6 files changed, 15 insertions(+), 6 deletions(-)



// PAIR LENNARD-JONES

   // int countlj=0;
/*
    for (int index=0; index<system.pairs.size(); index++) {
        Atom *atom1_ptr = system.pairs[index].atom1_ptr;
        Atom *atom2_ptr = system.pairs[index].atom2_ptr;

        i = system.pairs[index].id_set[0];
        j = system.pairs[index].id_set[1];
        k = system.pairs[index].id_set[2];
        l = system.pairs[index].id_set[3];

        if ( i >= k) continue; // skip duplicates
        if (system.pairs[index].eps == 0 || system.pairs[index].sig == 0) continue; // skip zero energy
        if (system.pairs[index].recalculate) {
            // only if flagged for recalculation

            r = system.pairs[index].r;
            sr6 = system.pairs[index].sig / r;
            sr6 *= sr6;
            sr6 *= sr6*sr6;

            if (system.constants.rd_lrc == "off" || r <= cutoff) {
                this_lj = 4.0*system.pairs[index].eps*(sr6*sr6 - sr6);
                total_lj += this_lj;
                total_pot += this_lj;
                system.pairs[index].lj = this_lj;
         //       countlj++;
            }

        } else {
            // r hasn't changed so don't recalculate.
            if (system.constants.rd_lrc == "off" || system.pairs[index].r <= cutoff) {
                this_lj = system.pairs[index].lj;
                total_lj += this_lj;
                total_pot += this_lj;
           //     countlj++;
            }
        }
    }
   // printf("COUNT LJ %i \n",countlj);
*/










// ================ GET FORCES ON ATOMS ==============================
/*void calculateForces_OLD(System &system, string model, double dt) {

    // initialize variable for pressure calc in NVT
    system.constants.force_sum_for_pressure = 0;
    system.constants.MM_interactions = 0;
    // loop through all atoms
	for (int j=0; j <system.molecules.size(); j++) {
	for (int i = 0; i < system.molecules[j].atoms.size(); i++) {
		// initialize stuff
		system.molecules[j].atoms[i].force[0] = 0.0;
		system.molecules[j].atoms[i].force[1] = 0.0;
		system.molecules[j].atoms[i].force[2] = 0.0;
		system.molecules[j].atoms[i].V = 0.0;
	}
	}

   // int countem=0;
    double eps, sig;
	for (int i = 0; i < (int)system.molecules.size(); i++) {
		for (int j = 0; j < system.molecules[i].atoms.size(); j++) {

		for (int k = 0; k<system.molecules.size(); k++) { // use k=i+1 to neglect intramolec
		for (int l = 0; l<system.molecules[k].atoms.size(); l++) {
        if (k>i || (k==i && l>j)) { // the 1/2 n^2 - n matrix of atomic interaction

                //countem++;
                // check for mixing rules
				eps = system.molecules[i].atoms[j].eps;
                sig = system.molecules[i].atoms[j].sig;

				if (system.molecules[i].atoms[j].eps != system.molecules[k].atoms[l].eps)
					eps = sqrt(eps * system.molecules[k].atoms[l].eps);
				if (system.molecules[i].atoms[j].sig != system.molecules[k].atoms[l].sig)
					sig = 0.5*(sig + system.molecules[k].atoms[l].sig);

                //printf("computing interaction of atomID %i and %i\n", system.molecules[i].atoms[j].ID, system.molecules[k].atoms[l].ID);
				// preliminary calculations (distance between atoms, etc.)
				double d[3],di[3],f[3],img[3],rsq,r,rimg,rimg2,u[3],s2,s6,r6, sr, sr2, sr6;
                int n,p,q;
				for (n=0; n<3; n++)
                    d[n] = system.molecules[i].atoms[j].pos[n] - system.molecules[k].atoms[l].pos[n];

                if (system.constants.md_pbc == "on") {
                    // get image r in reciprocal space
                    for (p = 0; p <3 ; p++) {
                        img[p]=0;
                        for (q = 0; q < 3; q++) {
                            img[p] += system.pbc.reciprocal_basis[q][p]*d[q];
                        }
                        img[p] = rint(img[p]); // round to integer.
                    }

                    // matrix multiply back into real basis
                    for (p=0; p<3; p++) {
                        di[p]=0;
                        for (q=0; q<3; q++) {
                            di[p] += system.pbc.basis[q][p]*img[q];
                        }
                    }
                    // correct displacement
                    for (n=0; n<3; n++)
                        di[n] = d[n] - di[n];


                    // pythagorean
	                rsq = dddotprod(d,d);
                    //rimg2 = dddotprod(di, di);
                    r = sqrt(rsq);
                    //rimg = sqrt(rimg2);
                } else {
                    double distances[4] distances = getDistanceXYZ(system, i,j,k,l);
                    r = distances[3];
                    for (int n=0; n<3; n++) d[n] = distances[n];
                    rsq = r*r;
                }

                // apply 1/2 box cutoff if NVT / NVE:: p.29-30 Computer Simulation of Liquids 1991 Allen Tildesley
                // NOTE: the r_c cutoff is NOT used in MD at all..
                if (d[0] < -system.pbc.x_length/2) d[0] += system.pbc.x_length;
                if (d[0] > system.pbc.x_length/2) d[0] -= system.pbc.x_length;
                if (d[1] < -system.pbc.y_length/2) d[1] += system.pbc.y_length;
                if (d[1] > system.pbc.y_length/2) d[1] -= system.pbc.y_length;
                if (d[2] < -system.pbc.z_length/2) d[2] += system.pbc.z_length;
                if (d[2] > system.pbc.z_length/2) d[2] -= system.pbc.z_length;

                //printf("r = %f; rimg = %f\n", r, rimg);
                //printf("d: %f %f %f;\n", d[0],d[1],d[2]); //,di[0],di[1],di[2]);

				r6 = rsq*rsq*rsq;
				s2 = sig*sig;
				s6 = s2*s2*s2;

                if (i != k) { // don't do self-interaction for potential.
                    sr = sig/r;
                    sr2 = sr*sr;
                    sr6 = sr2*sr2*sr2;
                }

                for (int n=0; n<3; n++) u[n] = d[n]/r;


				// Lennard-Jones force calculations in K/A
				for (int n=0; n<3; n++) f[n] = 24.0*d[n]*eps*(2*(s6*s6)/(r6*r6*rsq) - s6/(r6*rsq));
                for (int n=0; n<3; n++) {
                    system.molecules[i].atoms[j].force[n] += f[n];
				    system.molecules[k].atoms[l].force[n] -= f[n];
                }

				// LJ Potential in K
                if (i != k)
				    system.molecules[i].atoms[j].V += 4.0*eps*(sr6*sr6 - sr6);

				if (model == "ljes" || model == "ljespolar") {

				// Coulomb's law electrostatic force. Overwrite fx,fy,fz in K/A
                for (int n=0; n<3; n++)
                    f[n] = ((system.molecules[i].atoms[j].C*system.constants.E2REDUCED * system.molecules[k].atoms[l].C*system.constants.E2REDUCED)/rsq) * u[n];
                for (int n=0; n<3; n++) {
                    system.molecules[i].atoms[j].force[n] += f[n];
                    system.molecules[k].atoms[l].force[n] -= f[n];
                }

                //Coulombic potential in K
                if (i != k)
				    system.molecules[i].atoms[j].V += ((system.molecules[i].atoms[j].C*system.constants.E2REDUCED * system.molecules[k].atoms[l].C*system.constants.E2REDUCED)/r);
				} // end coulombic addition


            } // end if not self
            } // end loop l
		    } // end loop k
            } // end loop j
        // atomic forces are done, so now calc molecular values
        system.molecules[i].calc_force();
        if (system.constants.md_rotations == "on" && system.molecules[i].atoms.size() > 1)
            system.molecules[i].calc_torque();


        // also compute force * r dot products for pressure calc in NVT
        if (system.constants.ensemble == "nvt") {
            for (int j=0; j<system.molecules[i].atoms.size(); j++) {
                for (int k=0; k<system.molecules.size(); k++) {
                    for (int l=0; l<system.molecules[k].atoms.size(); l++) {
                        if (k>i || (k==i && l>j)) {
                           if (system.molecules[i].MF == "M" && system.molecules[k].MF == "M") {
                                double distances[4] dist = getDistanceXYZ(system, i,j,k,l);
                                for (int n=0; n<3; n++) {
                                    system.constants.force_sum_for_pressure += system.molecules[i].atoms[j].force[n] * dist[n];
                                    system.constants.force_sum_for_pressure += system.molecules[k].atoms[l].force[n] * dist[n];
                                    system.constants.MM_interactions += 2;
                                }
                            }
                        }
                    }
                }
            }
        } // end if NVT

    } // end loop i

//printf("count: %i\n",countem);
}
*/



/*
    // 1b) ROTATE MOLECULES BY TORQUE
    if (system.constants.md_mode == "molecular") {
       for (int j=0; j<system.molecules.size(); j++) {
            if (system.molecules[j].MF == "M" && system.molecules[j].atoms.size() > 1) {
                for (int i=0; i<system.molecules[j].atoms.size(); i++) {

                    // ROTATE IN YZ PLANE (about x)
                    double* rotatedx = rotatePoint(system,
                        system.molecules[j].atoms[i].pos[0] - system.molecules[j].com[0],
                        system.molecules[j].atoms[i].pos[1] - system.molecules[j].com[1],
                        system.molecules[j].atoms[i].pos[2] - system.molecules[j].com[2],
                        "x", system.molecules[j].ang_rot[0]);
                    for (int n=0; n<3; n++)
                        system.molecules[j].atoms[i].pos[n] = rotatedx[n] + system.molecules[j].com[n];

                    // ROTATE IN XZ PLANE (about y)
                    double* rotatedy = rotatePoint(system,
                        system.molecules[j].atoms[i].pos[0] - system.molecules[j].com[0],
                        system.molecules[j].atoms[i].pos[1] - system.molecules[j].com[1],
                        system.molecules[j].atoms[i].pos[2] - system.molecules[j].com[2],
                        "y", system.molecules[j].ang_rot[1]);
                    for (int n=0; n<3; n++)
                        system.molecules[j].atoms[i].pos[n] = rotatedy[n] + system.molecules[j].com[n];

                    // ROTATE IN XY PLANE (about z)
                    double* rotatedz = rotatePoint(system,
                        system.molecules[j].atoms[i].pos[0] - system.molecules[j].com[0],
                        system.molecules[j].atoms[i].pos[1] - system.molecules[j].com[1],
                        system.molecules[j].atoms[i].pos[2] - system.molecules[j].com[2],
                        "z", system.molecules[j].ang_rot[2]);
                    for (int n=0; n<3; n++)
                        system.molecules[j].atoms[i].pos[n] = rotatedz[n] + system.molecules[j].com[n];

                   // if (system.molecules[j].atoms[i].prevpos[0] != system.molecules[j].atoms[i].pos[0]) printf("diff after rotate: %f %f %f\n", system.molecules[j].atoms[i].pos[0] - system.molecules[j].atoms[i].prevpos[0], system.molecules[j].atoms[i].pos[1] - system.molecules[j].atoms[i].prevpos[1], system.molecules[j].atoms[i].pos[2] - system.molecules[j].atoms[i].prevpos[2]);

                } // end atom loop i
            } // end if movable
        }  // end molecule loop j
    } // end if molecular movements
    // END ROTATIONAL MOTION
*/





cuda external test
    /*
    FILE *in;
    char buff[512];
    if(!(in = popen("./cuda", "r"))){
        return 1;
    }

    while(fgets(buff, sizeof(buff), in)!=NULL){
        cout << buff;
    }
    pclose(in);
    */




cuda garbage

        //cuda_atom anchoratom=atom_list[i]; // make an anchor in register to save time.
        //printf("potential form = %i\n", potential_form); 
        //printf("HELLO I AM THREAD %i\n",i);
        //printf("atom %i contains position vector %f %f %f\n", anchoratom.pos[0], anchoratom.pos[1], anchoratom.pos[2]);

        // distances etc.
        double rimg,rimg2,r2=0,r,ri,ri2=0,u[3],f[3]; // define variables
        int p,q; // dimensionality
        double d[3],di[3],img[3],dimg[3];    
        double eps,sig;    
        double s6,r6;

        //accumalated forces (suggestion by Dr. Tu during class presenation)
        double af[3]={0,0,0};

        // make sure we're synced across the block first.
        __syncthreads();

        // loop through pairs
        for (int j=0; j<n; j++) {
        //circular access of shared memory within tile
        // NEAREST IMAGE DISTANCE BETWEEN ATOMS
        // i.e. PBC R
        for (p=0;p<3;p++) d[p] = atom_list[i].pos[p] - atom_list[j].pos[p];
        for (p=0;p<3;p++) {
            img[p]=0;
            for (q=0; q<3; q++) {
                img[p] += recip_basis[q][p]*d[q];
            }
            img[p]=rint(img[p]);
        }        
        for (p=0; p<3; p++) {
            di[p]=0;
            for (q=0;q<3;q++) {
                di[p] += basis[q][p]*img[q];
            }
        }
        for (p=0;p<3;p++)
            di[p] = d[p] - di[p];
        
        for (p=0;p<3;p++) {
            r2 += d[p]*d[p];
            ri2 += di[p]*di[p];
        }
        r=sqrt(r2);
        ri=sqrt(ri2);
        if (ri != ri) { // NAN check
            rimg=r;
            for (p=0;p<3;p++)
                dimg[p]=d[p];
        } else {
            rimg=ri;
            for (p=0;p<3;p++)
                dimg[p]=di[p];
        }
        
        for (p=0;p<3;p++) u[p] = dimg[p]/rimg;

        printf("rimg = %f\n", rimg);


        if (potential_form == 0 || potential_form == 1) {
            // apply mixing rules for LJ force
            eps = atom_list[i].eps;
            if (eps != atom_list[j].eps)
                eps = sqrt(eps * atom_list[j].eps);
            sig = atom_list[i].sig;
            if (sig != atom_list[j].sig)
                sig = 0.5*(sig + atom_list[j].sig); 
               
            s6=sig*sig;
            s6 *= s6*s6;
            rimg2=rimg*rimg;
            r6=rimg2*rimg2*rimg2;

            if (r<=cutoff) {
                // calculate LJ force
                for (p=0;p<3;p++)
                    f[p] = 24*d[p]*eps*(2*(s6*s6)/(r6*r6*rimg2) - s6/(r6*rimg2));

                // add forces to accumulated register variable
                for (p=0;p<3;p++)
                    af[p] += f[p]; 
        
                //printf("made it to LJ atomicAdd\n");
                // apply LJ forces to pair atom
                for (p=0;p<3;p++) {
                    //printf("before");
                    atomicAdd(&(atom_list[j].f[p]), -f[p]);           
                    //printf("after");
                    //printf("f[%i] = %f\n", p, f[p]);
                }
            }

        } // end LJ force contribs   
        if (potential_form == 1) { 
            // calculat electrostatic force
            // this is NOT Ewald. But current errro exists for LJ anways.
            for (p=0;p<3;p++)
                f[p] = u[p]*((atom_list[i].charge * atom_list[j].charge)/rimg2);

            // apply electrostatic forces to accumulation   
            for (p=0;p<3;p++)
                af[p] += f[p];            

            // apply ES force to pair atom
            for (p=0;p<3;p++)
                atomicAdd(&(atom_list[j].f[p]), -f[p]);
        }        

         __syncthreads();//make sure all forces are updated before loading more atoms

        // finally update the base atom forces
        for (p=0;p<3;p++) {
            atomicAdd(&(atom_list[i].f[p]),af[p]);
            //printf("af[%i] = %f\n", p, af[p]);
        }
        } // end pair loop (j)
        // test
        atom_list[i].eps=9000;
        
    } // end if i<n





bool is_aro(string atom) {
    // return true if this atom is a valid aromatic-ring maker
    if (atom.find("C_") != std::string::npos ||
        atom.find("O_") != std::string::npos ||
        atom.find("N_") != std::string::npos ||
        atom.find("S_") != std::string::npos ||
        atom.find("P_") != std::string::npos ||
        atom.find("B_") != std::string::npos)
        return true;
    else 
        return false;

}

